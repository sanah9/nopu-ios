// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(nopu_ffiFFI)
import nopu_ffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_nopu_rust_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_nopu_rust_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureNopuRustFfiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol NostrClientProtocol: AnyObject, Sendable {
    
    func addRelay(url: String) throws 
    
    func connect() throws 
    
    func disconnect() throws 
    
    func fetchEvents(filter: NostrFilter, timeoutSeconds: UInt64?) throws  -> [NostrEvent]
    
    func getMetadata(pubkey: String) throws  -> NostrMetadata?
    
    func getPublicKey() throws  -> String
    
    func getRelayStatus()  -> [RelayInfo]
    
    func publishTextNote(content: String, tags: [[String]]?) throws  -> String
    
    func removeRelay(url: String) throws 
    
    func sendPrivateMessage(receiverPubkey: String, message: String) throws  -> String
    
    func setMetadata(metadata: NostrMetadata) throws  -> String
    
    func subscribe(filter: NostrFilter, autoCloseAfter: UInt64?) throws  -> SubscriptionResult
    
    func unsubscribe(subscriptionId: String) throws 
    
}
open class NostrClient: NostrClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nopu_rust_ffi_fn_clone_nostrclient(self.pointer, $0) }
    }
public convenience init(keys: NostrKeys)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_constructor_nostrclient_new(
        FfiConverterTypeNostrKeys_lower(keys),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_nopu_rust_ffi_fn_free_nostrclient(pointer, $0) }
    }

    

    
open func addRelay(url: String)throws   {try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_add_relay(self.uniffiClonePointer(),
        FfiConverterString.lower(url),$0
    )
}
}
    
open func connect()throws   {try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_connect(self.uniffiClonePointer(),$0
    )
}
}
    
open func disconnect()throws   {try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_disconnect(self.uniffiClonePointer(),$0
    )
}
}
    
open func fetchEvents(filter: NostrFilter, timeoutSeconds: UInt64?)throws  -> [NostrEvent]  {
    return try  FfiConverterSequenceTypeNostrEvent.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_fetch_events(self.uniffiClonePointer(),
        FfiConverterTypeNostrFilter_lower(filter),
        FfiConverterOptionUInt64.lower(timeoutSeconds),$0
    )
})
}
    
open func getMetadata(pubkey: String)throws  -> NostrMetadata?  {
    return try  FfiConverterOptionTypeNostrMetadata.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_get_metadata(self.uniffiClonePointer(),
        FfiConverterString.lower(pubkey),$0
    )
})
}
    
open func getPublicKey()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_get_public_key(self.uniffiClonePointer(),$0
    )
})
}
    
open func getRelayStatus() -> [RelayInfo]  {
    return try!  FfiConverterSequenceTypeRelayInfo.lift(try! rustCall() {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_get_relay_status(self.uniffiClonePointer(),$0
    )
})
}
    
open func publishTextNote(content: String, tags: [[String]]?)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_publish_text_note(self.uniffiClonePointer(),
        FfiConverterString.lower(content),
        FfiConverterOptionSequenceSequenceString.lower(tags),$0
    )
})
}
    
open func removeRelay(url: String)throws   {try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_remove_relay(self.uniffiClonePointer(),
        FfiConverterString.lower(url),$0
    )
}
}
    
open func sendPrivateMessage(receiverPubkey: String, message: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_send_private_message(self.uniffiClonePointer(),
        FfiConverterString.lower(receiverPubkey),
        FfiConverterString.lower(message),$0
    )
})
}
    
open func setMetadata(metadata: NostrMetadata)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_set_metadata(self.uniffiClonePointer(),
        FfiConverterTypeNostrMetadata_lower(metadata),$0
    )
})
}
    
open func subscribe(filter: NostrFilter, autoCloseAfter: UInt64?)throws  -> SubscriptionResult  {
    return try  FfiConverterTypeSubscriptionResult_lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_subscribe(self.uniffiClonePointer(),
        FfiConverterTypeNostrFilter_lower(filter),
        FfiConverterOptionUInt64.lower(autoCloseAfter),$0
    )
})
}
    
open func unsubscribe(subscriptionId: String)throws   {try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_method_nostrclient_unsubscribe(self.uniffiClonePointer(),
        FfiConverterString.lower(subscriptionId),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNostrClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NostrClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NostrClient {
        return NostrClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NostrClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NostrClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> NostrClient {
    return try FfiConverterTypeNostrClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrClient_lower(_ value: NostrClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNostrClient.lower(value)
}




public struct NostrEvent {
    public var id: String
    public var pubkey: String
    public var createdAt: UInt64
    public var kind: UInt16
    public var tags: [[String]]
    public var content: String
    public var sig: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, pubkey: String, createdAt: UInt64, kind: UInt16, tags: [[String]], content: String, sig: String) {
        self.id = id
        self.pubkey = pubkey
        self.createdAt = createdAt
        self.kind = kind
        self.tags = tags
        self.content = content
        self.sig = sig
    }
}

#if compiler(>=6)
extension NostrEvent: Sendable {}
#endif


extension NostrEvent: Equatable, Hashable {
    public static func ==(lhs: NostrEvent, rhs: NostrEvent) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.kind != rhs.kind {
            return false
        }
        if lhs.tags != rhs.tags {
            return false
        }
        if lhs.content != rhs.content {
            return false
        }
        if lhs.sig != rhs.sig {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(pubkey)
        hasher.combine(createdAt)
        hasher.combine(kind)
        hasher.combine(tags)
        hasher.combine(content)
        hasher.combine(sig)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNostrEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrEvent {
        return
            try NostrEvent(
                id: FfiConverterString.read(from: &buf), 
                pubkey: FfiConverterString.read(from: &buf), 
                createdAt: FfiConverterUInt64.read(from: &buf), 
                kind: FfiConverterUInt16.read(from: &buf), 
                tags: FfiConverterSequenceSequenceString.read(from: &buf), 
                content: FfiConverterString.read(from: &buf), 
                sig: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: NostrEvent, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.pubkey, into: &buf)
        FfiConverterUInt64.write(value.createdAt, into: &buf)
        FfiConverterUInt16.write(value.kind, into: &buf)
        FfiConverterSequenceSequenceString.write(value.tags, into: &buf)
        FfiConverterString.write(value.content, into: &buf)
        FfiConverterString.write(value.sig, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrEvent_lift(_ buf: RustBuffer) throws -> NostrEvent {
    return try FfiConverterTypeNostrEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrEvent_lower(_ value: NostrEvent) -> RustBuffer {
    return FfiConverterTypeNostrEvent.lower(value)
}


public struct NostrFilter {
    public var ids: [String]?
    public var authors: [String]?
    public var kinds: [UInt16]?
    public var since: UInt64?
    public var until: UInt64?
    public var limit: UInt64?
    public var search: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ids: [String]?, authors: [String]?, kinds: [UInt16]?, since: UInt64?, until: UInt64?, limit: UInt64?, search: String?) {
        self.ids = ids
        self.authors = authors
        self.kinds = kinds
        self.since = since
        self.until = until
        self.limit = limit
        self.search = search
    }
}

#if compiler(>=6)
extension NostrFilter: Sendable {}
#endif


extension NostrFilter: Equatable, Hashable {
    public static func ==(lhs: NostrFilter, rhs: NostrFilter) -> Bool {
        if lhs.ids != rhs.ids {
            return false
        }
        if lhs.authors != rhs.authors {
            return false
        }
        if lhs.kinds != rhs.kinds {
            return false
        }
        if lhs.since != rhs.since {
            return false
        }
        if lhs.until != rhs.until {
            return false
        }
        if lhs.limit != rhs.limit {
            return false
        }
        if lhs.search != rhs.search {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ids)
        hasher.combine(authors)
        hasher.combine(kinds)
        hasher.combine(since)
        hasher.combine(until)
        hasher.combine(limit)
        hasher.combine(search)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNostrFilter: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrFilter {
        return
            try NostrFilter(
                ids: FfiConverterOptionSequenceString.read(from: &buf), 
                authors: FfiConverterOptionSequenceString.read(from: &buf), 
                kinds: FfiConverterOptionSequenceUInt16.read(from: &buf), 
                since: FfiConverterOptionUInt64.read(from: &buf), 
                until: FfiConverterOptionUInt64.read(from: &buf), 
                limit: FfiConverterOptionUInt64.read(from: &buf), 
                search: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: NostrFilter, into buf: inout [UInt8]) {
        FfiConverterOptionSequenceString.write(value.ids, into: &buf)
        FfiConverterOptionSequenceString.write(value.authors, into: &buf)
        FfiConverterOptionSequenceUInt16.write(value.kinds, into: &buf)
        FfiConverterOptionUInt64.write(value.since, into: &buf)
        FfiConverterOptionUInt64.write(value.until, into: &buf)
        FfiConverterOptionUInt64.write(value.limit, into: &buf)
        FfiConverterOptionString.write(value.search, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrFilter_lift(_ buf: RustBuffer) throws -> NostrFilter {
    return try FfiConverterTypeNostrFilter.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrFilter_lower(_ value: NostrFilter) -> RustBuffer {
    return FfiConverterTypeNostrFilter.lower(value)
}


public struct NostrKeys {
    public var publicKey: String
    public var privateKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(publicKey: String, privateKey: String) {
        self.publicKey = publicKey
        self.privateKey = privateKey
    }
}

#if compiler(>=6)
extension NostrKeys: Sendable {}
#endif


extension NostrKeys: Equatable, Hashable {
    public static func ==(lhs: NostrKeys, rhs: NostrKeys) -> Bool {
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.privateKey != rhs.privateKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(publicKey)
        hasher.combine(privateKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNostrKeys: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrKeys {
        return
            try NostrKeys(
                publicKey: FfiConverterString.read(from: &buf), 
                privateKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: NostrKeys, into buf: inout [UInt8]) {
        FfiConverterString.write(value.publicKey, into: &buf)
        FfiConverterString.write(value.privateKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrKeys_lift(_ buf: RustBuffer) throws -> NostrKeys {
    return try FfiConverterTypeNostrKeys.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrKeys_lower(_ value: NostrKeys) -> RustBuffer {
    return FfiConverterTypeNostrKeys.lower(value)
}


public struct NostrMetadata {
    public var name: String?
    public var about: String?
    public var picture: String?
    public var banner: String?
    public var displayName: String?
    public var nip05: String?
    public var lud16: String?
    public var website: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String?, about: String?, picture: String?, banner: String?, displayName: String?, nip05: String?, lud16: String?, website: String?) {
        self.name = name
        self.about = about
        self.picture = picture
        self.banner = banner
        self.displayName = displayName
        self.nip05 = nip05
        self.lud16 = lud16
        self.website = website
    }
}

#if compiler(>=6)
extension NostrMetadata: Sendable {}
#endif


extension NostrMetadata: Equatable, Hashable {
    public static func ==(lhs: NostrMetadata, rhs: NostrMetadata) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.about != rhs.about {
            return false
        }
        if lhs.picture != rhs.picture {
            return false
        }
        if lhs.banner != rhs.banner {
            return false
        }
        if lhs.displayName != rhs.displayName {
            return false
        }
        if lhs.nip05 != rhs.nip05 {
            return false
        }
        if lhs.lud16 != rhs.lud16 {
            return false
        }
        if lhs.website != rhs.website {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(about)
        hasher.combine(picture)
        hasher.combine(banner)
        hasher.combine(displayName)
        hasher.combine(nip05)
        hasher.combine(lud16)
        hasher.combine(website)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNostrMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrMetadata {
        return
            try NostrMetadata(
                name: FfiConverterOptionString.read(from: &buf), 
                about: FfiConverterOptionString.read(from: &buf), 
                picture: FfiConverterOptionString.read(from: &buf), 
                banner: FfiConverterOptionString.read(from: &buf), 
                displayName: FfiConverterOptionString.read(from: &buf), 
                nip05: FfiConverterOptionString.read(from: &buf), 
                lud16: FfiConverterOptionString.read(from: &buf), 
                website: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: NostrMetadata, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.about, into: &buf)
        FfiConverterOptionString.write(value.picture, into: &buf)
        FfiConverterOptionString.write(value.banner, into: &buf)
        FfiConverterOptionString.write(value.displayName, into: &buf)
        FfiConverterOptionString.write(value.nip05, into: &buf)
        FfiConverterOptionString.write(value.lud16, into: &buf)
        FfiConverterOptionString.write(value.website, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrMetadata_lift(_ buf: RustBuffer) throws -> NostrMetadata {
    return try FfiConverterTypeNostrMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrMetadata_lower(_ value: NostrMetadata) -> RustBuffer {
    return FfiConverterTypeNostrMetadata.lower(value)
}


public struct RelayInfo {
    public var url: String
    public var status: String
    public var connected: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(url: String, status: String, connected: Bool) {
        self.url = url
        self.status = status
        self.connected = connected
    }
}

#if compiler(>=6)
extension RelayInfo: Sendable {}
#endif


extension RelayInfo: Equatable, Hashable {
    public static func ==(lhs: RelayInfo, rhs: RelayInfo) -> Bool {
        if lhs.url != rhs.url {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.connected != rhs.connected {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
        hasher.combine(status)
        hasher.combine(connected)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRelayInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RelayInfo {
        return
            try RelayInfo(
                url: FfiConverterString.read(from: &buf), 
                status: FfiConverterString.read(from: &buf), 
                connected: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: RelayInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterString.write(value.status, into: &buf)
        FfiConverterBool.write(value.connected, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRelayInfo_lift(_ buf: RustBuffer) throws -> RelayInfo {
    return try FfiConverterTypeRelayInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRelayInfo_lower(_ value: RelayInfo) -> RustBuffer {
    return FfiConverterTypeRelayInfo.lower(value)
}


public struct SubscriptionResult {
    public var subscriptionId: String
    public var events: [NostrEvent]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(subscriptionId: String, events: [NostrEvent]) {
        self.subscriptionId = subscriptionId
        self.events = events
    }
}

#if compiler(>=6)
extension SubscriptionResult: Sendable {}
#endif


extension SubscriptionResult: Equatable, Hashable {
    public static func ==(lhs: SubscriptionResult, rhs: SubscriptionResult) -> Bool {
        if lhs.subscriptionId != rhs.subscriptionId {
            return false
        }
        if lhs.events != rhs.events {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(subscriptionId)
        hasher.combine(events)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSubscriptionResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscriptionResult {
        return
            try SubscriptionResult(
                subscriptionId: FfiConverterString.read(from: &buf), 
                events: FfiConverterSequenceTypeNostrEvent.read(from: &buf)
        )
    }

    public static func write(_ value: SubscriptionResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.subscriptionId, into: &buf)
        FfiConverterSequenceTypeNostrEvent.write(value.events, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriptionResult_lift(_ buf: RustBuffer) throws -> SubscriptionResult {
    return try FfiConverterTypeSubscriptionResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriptionResult_lower(_ value: SubscriptionResult) -> RustBuffer {
    return FfiConverterTypeSubscriptionResult.lower(value)
}


public enum NostrError: Swift.Error {

    
    
    case InvalidHex(message: String)
    
    case InvalidPublicKey(message: String)
    
    case InvalidPrivateKey(message: String)
    
    case RelayConnectionFailed(message: String)
    
    case EventCreationFailed(message: String)
    
    case EventPublishingFailed(message: String)
    
    case EventQueryFailed(message: String)
    
    case SubscriptionFailed(message: String)
    
    case Generic(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNostrError: FfiConverterRustBuffer {
    typealias SwiftType = NostrError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidHex(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .InvalidPublicKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .InvalidPrivateKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .RelayConnectionFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .EventCreationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .EventPublishingFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .EventQueryFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .SubscriptionFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NostrError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidHex(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .InvalidPublicKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .InvalidPrivateKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .RelayConnectionFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .EventCreationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .EventPublishingFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .EventQueryFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .SubscriptionFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrError_lift(_ buf: RustBuffer) throws -> NostrError {
    return try FfiConverterTypeNostrError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNostrError_lower(_ value: NostrError) -> RustBuffer {
    return FfiConverterTypeNostrError.lower(value)
}


extension NostrError: Equatable, Hashable {}




extension NostrError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeNostrMetadata: FfiConverterRustBuffer {
    typealias SwiftType = NostrMetadata?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNostrMetadata.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNostrMetadata.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]

    public static func write(_ value: [UInt16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt16] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt16.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeNostrEvent: FfiConverterRustBuffer {
    typealias SwiftType = [NostrEvent]

    public static func write(_ value: [NostrEvent], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNostrEvent.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NostrEvent] {
        let len: Int32 = try readInt(&buf)
        var seq = [NostrEvent]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeNostrEvent.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRelayInfo: FfiConverterRustBuffer {
    typealias SwiftType = [RelayInfo]

    public static func write(_ value: [RelayInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRelayInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RelayInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [RelayInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRelayInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]

    public static func write(_ value: [[String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceString.read(from: &buf))
        }
        return seq
    }
}
public func generateKeys() -> NostrKeys  {
    return try!  FfiConverterTypeNostrKeys_lift(try! rustCall() {
    uniffi_nopu_rust_ffi_fn_func_generate_keys($0
    )
})
}
public func keysFromSecretKey(secretKeyHex: String)throws  -> NostrKeys  {
    return try  FfiConverterTypeNostrKeys_lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_func_keys_from_secret_key(
        FfiConverterString.lower(secretKeyHex),$0
    )
})
}
public func pubkeyFromSecretKey(secretKeyHex: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeNostrError_lift) {
    uniffi_nopu_rust_ffi_fn_func_pubkey_from_secret_key(
        FfiConverterString.lower(secretKeyHex),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_nopu_rust_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_func_generate_keys() != 50957) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_func_keys_from_secret_key() != 7789) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_func_pubkey_from_secret_key() != 34712) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_add_relay() != 42490) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_connect() != 46570) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_disconnect() != 28916) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_fetch_events() != 61076) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_get_metadata() != 20551) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_get_public_key() != 59903) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_get_relay_status() != 59030) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_publish_text_note() != 60289) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_remove_relay() != 57582) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_send_private_message() != 15611) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_set_metadata() != 39531) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_subscribe() != 64426) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_method_nostrclient_unsubscribe() != 37542) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nopu_rust_ffi_checksum_constructor_nostrclient_new() != 22417) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureNopuRustFfiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all